// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const deleteUserByUsername = `-- name: deleteUserByUsername :exec
DELETE FROM users WHERE username = ?
`

func (q *Queries) deleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const insertUser = `-- name: insertUser :exec

INSERT INTO users (username, password, salt, created_at)
VALUES (?, ?, ?, ?)
`

type insertUserParams struct {
	Username  string    `json:"username"`
	Password  []byte    `json:"password"`
	Salt      []byte    `json:"salt"`
	CreatedAt time.Time `json:"created_at"`
}

// this is a sqlite3 queries file
func (q *Queries) insertUser(ctx context.Context, arg insertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Username,
		arg.Password,
		arg.Salt,
		arg.CreatedAt,
	)
	return err
}

const selectUserByUsername = `-- name: selectUserByUsername :one
SELECT username, password, salt, created_at FROM users WHERE username = ?
`

func (q *Queries) selectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: updateUser :exec
UPDATE users SET username = ?, password = ?, salt = ?, created_at = ? WHERE username = ?
`

type updateUserParams struct {
	Username   string    `json:"username"`
	Password   []byte    `json:"password"`
	Salt       []byte    `json:"salt"`
	CreatedAt  time.Time `json:"created_at"`
	Username_2 string    `json:"username_2"`
}

func (q *Queries) updateUser(ctx context.Context, arg updateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Salt,
		arg.CreatedAt,
		arg.Username_2,
	)
	return err
}
